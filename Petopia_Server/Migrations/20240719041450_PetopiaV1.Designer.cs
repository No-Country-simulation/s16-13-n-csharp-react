// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Petopia_Server.Data;

#nullable disable

namespace Petopia_Server.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240719041450_PetopiaV1")]
    partial class PetopiaV1
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Petopia_Server.Models.Mascot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("Breed")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("MascotName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("MascotPhoto")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Species")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Mascots", (string)null);
                });

            modelBuilder.Entity("Petopia_Server.Models.MedicalRecord", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateOnly>("AppointmentTime")
                        .HasColumnType("date");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("LocationOfMedicalCheckup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MascotId")
                        .HasColumnType("integer");

                    b.Property<string>("NameMascotClinic")
                        .HasColumnType("text");

                    b.Property<string>("TypeOfMedicalCheckup")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VeterinaryName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MascotId");

                    b.ToTable("MedicalRecords", (string)null);
                });

            modelBuilder.Entity("Petopia_Server.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("PhoneNumber")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = -1,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "alexanderfrt@example.com",
                            FullName = "Alexander Flores",
                            Password = "$2a$11$ogYVQf0MB6/luQj/5KPacO9ctnGc.MHc49QsCQ9CoXlikD7klNLOy",
                            Username = "AlexanderFRT"
                        },
                        new
                        {
                            Id = -2,
                            DateAdded = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            DateUpdated = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Email = "zero@example.com",
                            FullName = "Zero Alpha",
                            Password = "$2a$11$sIBlOe6QKsr/hVpfYGkO0.gIycZprWnjn0KcQq8WI.cc.8.dFdE9e",
                            Username = "Zero"
                        });
                });

            modelBuilder.Entity("Petopia_Server.Models.VaccineTracking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DateAdded")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateUpdated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateOnly>("LastDateOfApplication")
                        .HasColumnType("date");

                    b.Property<int>("MascotId")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("ReminderDate")
                        .HasColumnType("date");

                    b.Property<string>("VaccineName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MascotId");

                    b.ToTable("VaccineTrackings", (string)null);
                });

            modelBuilder.Entity("Petopia_Server.Models.Mascot", b =>
                {
                    b.HasOne("Petopia_Server.Models.User", "User")
                        .WithMany("Mascots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Petopia_Server.Models.MedicalRecord", b =>
                {
                    b.HasOne("Petopia_Server.Models.Mascot", "Mascot")
                        .WithMany("MedicalRecords")
                        .HasForeignKey("MascotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascot");
                });

            modelBuilder.Entity("Petopia_Server.Models.VaccineTracking", b =>
                {
                    b.HasOne("Petopia_Server.Models.Mascot", "Mascot")
                        .WithMany("VaccineTrackings")
                        .HasForeignKey("MascotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Mascot");
                });

            modelBuilder.Entity("Petopia_Server.Models.Mascot", b =>
                {
                    b.Navigation("MedicalRecords");

                    b.Navigation("VaccineTrackings");
                });

            modelBuilder.Entity("Petopia_Server.Models.User", b =>
                {
                    b.Navigation("Mascots");
                });
#pragma warning restore 612, 618
        }
    }
}
